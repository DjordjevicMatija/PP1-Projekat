package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:
    boolean errorDetected = false;
    Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal SEMICOLON, COLON, COMMA, DOT, LPARENT, RPARENT, LBRACKET, RBRACKET, LBRACE, RBRACE, ARROW;
terminal PROG, CLASS, CONST, NEW, RETURN, VOID, EXTENDS, STATIC;
terminal BREAK, IF, ELSE, CONTINUE, FOR;
terminal PRINT, READ;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, ASSIGN;
terminal AND, OR;
terminal EQUALS, NOT_EQUALS, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal DeclList;
nonterminal Decl;
nonterminal ConstDecl;
nonterminal ConstList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Const;
nonterminal VarDecl;
nonterminal VarList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Var;
nonterminal MethodDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Method;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal MethodPars;
nonterminal FormPars;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FormParam;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal LocalVarDeclList;
nonterminal StatementList;
nonterminal Statement;
nonterminal UnmatchedStatement;
nonterminal MatchedStatement;
nonterminal Condition;
nonterminal CondTerm;
nonterminal CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TermList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal Label;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;
nonterminal DesignatorStmtList;
nonterminal DesignatorStatementElem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct DesignatorStatement;
nonterminal OptCondFact;
nonterminal OptActPars;
nonterminal ActPars;


Program ::= (Program)
    PROG ProgName:pName DeclList LBRACE MethodDeclList RBRACE
;
 
ProgName ::= (ProgName)
    IDENT:progName
;

DeclList ::=
    (DeclarationList) DeclList Decl
    | (NoDeclarationList) /* epsilon */
;

Decl ::=
    (ConstDeclaration) ConstDecl
    | (VarDeclaration) VarDecl
;

ConstDecl ::=
    (ConstantDeclaration) CONST Type ConstList SEMICOLON
    | (ErrorConstDeclSemi) CONST error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne konstante na liniji " + errleft); :}
;

ConstList ::=
    (SingleConstantDecl) Const
    | (ConsantListDecl) ConstList COMMA Const
    | (ErrorConstDeclComma) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne konstante na liniji " + errleft); :}
;

Const ::=
    (ConstNumber) IDENT:constName ASSIGN NUMBER
    | (ConstChar) IDENT:constName ASSIGN CHAR
    | (ConstBool) IDENT:constName ASSIGN BOOL
;

VarDecl ::=
    (VariableDeclaration) Type VarList SEMICOLON
    | (ErrorVarDeclSemi) error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive na liniji " + errleft); :}
;

VarList ::=
    (SingleVarDecl) Var
    | (VarListDecl) VarList COMMA Var
    | (ErrorVarDeclComma) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive na liniji " + errleft); :}
;

Var ::=
    (VarElement) IDENT:varName 
    | (VarArray) IDENT:varName LBRACKET RBRACKET
    | (VarMatrix) IDENT:varName  LBRACKET RBRACKET LBRACKET RBRACKET
;

MethodDeclList ::=
    (MethodDeclarationList) MethodDeclList Method
    | (NoMethodDeclarationList) /* epsilon */
;

Method ::=
    (Method) MethodName:mName LPARENT MethodPars RPARENT LocalVarDeclList LBRACE StatementList RBRACE
;

MethodName ::=
    (MethodTypeName) Type:returnType IDENT:methodName
    | (MethodVoidName) VOID IDENT:methodName
;

MethodPars ::=
    (MethodParameters) FormPars
    | (ErrorMethodParameters) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji parametara metode na liniji " + errleft); :}
    | (NoMethodParameters) /* epsilon */
;

FormPars ::=
    (FormParamList) FormPars COMMA FormParam
    | (SingleFormParam) FormParam
;
    
FormParam ::=
    (FormParamElement) Type:paramType IDENT:paramName
    | (FormParamArray) Type:paramType IDENT:paramName LBRACKET RBRACKET
;

Type ::= (Type)
    IDENT:typeName
;

LocalVarDeclList ::=
    (LocalVarDeclarations) LocalVarDeclList VarDecl
    | (NoLocalVarDeclarations) /* epsilon */
;
    
StatementList ::=
    (Statements) StatementList Statement
    | (NoStatements) /* epsilon */
;

Statement ::=
    (MatchedStmt) MatchedStatement
    | (UnmatchedStmt) UnmatchedStatement
;

UnmatchedStatement ::=
    (UnmatchedIf) IF LPARENT Condition RPARENT Statement
    | (UnmatchedIfElse) IF LPARENT Condition RPARENT MatchedStatement ELSE UnmatchedStatement
;

MatchedStatement ::=
    (MatchedIf) IF LPARENT Condition RPARENT MatchedStatement ELSE MatchedStatement
    | (DesignStmt) DesignatorStatement SEMICOLON
    | (BreakStmt) BREAK SEMICOLON
    | (ContinueStmt) CONTINUE SEMICOLON
    | (ReturnNoExpr) RETURN SEMICOLON
    | (ReturnExpr) RETURN Expr SEMICOLON
    | (ReadStmt) READ LPARENT Designator RPARENT SEMICOLON
    | (PrintExpr) PRINT LPARENT Expr RPARENT SEMICOLON
    | (PrintExprNumber) PRINT LPARENT Expr COMMA NUMBER RPARENT SEMICOLON
    | (ForStmt) FOR LPARENT DesignatorStmtList SEMICOLON OptCondFact SEMICOLON DesignatorStmtList RPARENT MatchedStatement
    | (StmtList) LBRACE StatementList RBRACE
    | (ErrorAssign) error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
;

DesignatorStmtList ::=
    (DesignatorStatements) DesignatorStmtList DesignatorStatementElem
    | (NoDesignatorStatements) /* epsilon */
;

DesignatorStatementElem ::=
    (SingleDesignatorStmt) DesignatorStatement
    | (MultipleDesignatorStmt) DesignatorStatementElem COMMA DesignatorStatement
    ;

DesignatorStatement ::=
    (DesignAssign) Designator:design Assignop Expr
    | (DesingFunc) Designator:func LPARENT OptActPars RPARENT
    | (DesignInc) Designator:design INC
    | (DesignDec) Designator:design DEC
;

OptCondFact ::= 
    (ConditionFactor) CondFact
    | (NoConditionFactor) /* epsilon */
;

OptActPars ::=
    (ActParameters) ActPars
    | (NoActParameters) /* epsilon */
;

ActPars ::=
    (SingleActParam) Expr:e
    | (ActParamList) ActPars COMMA Expr
;

Condition ::=
    (SingleConditionTerm) CondTerm
    | (ConditionTermList) Condition OR CondTerm
;

CondTerm ::=
    (SingleConditionFact) CondFact
    | (ConditionFactList) CondTerm AND CondFact
;

CondFact ::=
    (SingleCondition) Expr
    | (ConditionList) Expr Relop Expr
;

Expr ::=
    (PositiveTermList) TermList
    | (NegativeTermList) MINUS TermList
;

TermList ::=
    (SingleTerm) Term
    | (TerminalList) TermList Addop Term
;

Term ::= (Term)
    FactorList
;

FactorList ::=
    (SingleFactor) Factor
    | (Factors) FactorList Mulop Factor
;

Factor ::=
    (DesignFactor) Designator:design
    | (DesingFuncFactor) Designator:func LPARENT OptActPars RPARENT
    | (FactorNumber) NUMBER
    | (FactorChar) CHAR
    | (FactorBool) BOOL
    | (NewArrayFactor) NEW Type LBRACKET Expr RBRACKET
    | (NewMatrixFactor) NEW Type LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET
    | (NewClassFactor) NEW Type LPARENT OptActPars RPARENT
    | (FactorExpr) LPARENT Expr RPARENT
;

Designator ::=
    (DesignatorElement) IDENT:designName
    | (DesignatorArray) IDENT:designName LBRACKET Expr RBRACKET
    | (DesignatorMatrix) IDENT:designName LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET
;

Label ::= (Label)
    IDENT
;

Assignop ::= (Assignop)
    ASSIGN
;

Relop ::=
    (RelopEquals) EQUALS
    | (RelopNotEquals) NOT_EQUALS
    | (RelopGreater) GREATER
    | (RelopGreaterEqual) GREATER_EQUAL
    | (RelopLess) LESS
    | (RelopLessEqual) LESS_EQUAL
;

Addop ::=
    (AddopPlus) PLUS
    | (AddopMinus) MINUS
;

Mulop ::=
    (MulopMul) MUL
    | (MulopDiv) DIV
    | (MulopMod) MOD
;