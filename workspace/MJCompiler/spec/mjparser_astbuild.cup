package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:
    boolean errorDetected = false;
    Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal SEMICOLON, COLON, COMMA, DOT, LPARENT, RPARENT, LBRACKET, RBRACKET, LBRACE, RBRACE, ARROW;
terminal PROG, CLASS, CONST, NEW, RETURN, VOID, EXTENDS, STATIC;
terminal BREAK, IF, ELSE, CONTINUE, FOR;
terminal PRINT, READ;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, ASSIGN;
terminal AND, OR;
terminal EQUALS, NOT_EQUALS, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal DeclList DeclList;
nonterminal Decl Decl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstList ConstList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Const;
nonterminal VarDecl VarDecl;
nonterminal VarList VarList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Var;
nonterminal MethodDeclList MethodDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Method;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal MethodPars MethodPars;
nonterminal FormPars FormPars;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FormParam;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal LocalVarDeclList LocalVarDeclList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal UnmatchedStatement UnmatchedStatement;
nonterminal MatchedStatement MatchedStatement;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TermList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal DesignatorStmtList DesignatorStmtList;
nonterminal DesignatorStatementElem DesignatorStatementElem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct DesignatorStatement;
nonterminal OptCondFact OptCondFact;
nonterminal OptActPars OptActPars;
nonterminal ActPars ActPars;


Program ::= (Program)
    PROG ProgName:pName DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(pName, D1, M2); RESULT.setLine(pNameleft); :}
;
 
ProgName ::= (ProgName)
    IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :}
;

DeclList ::=
    (DeclarationList) DeclList:D1 Decl:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
    | (NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
;

Decl ::=
    (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
    | (VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
;

ConstDecl ::=
    (ConstantDeclaration) CONST Type:T1 ConstList:C2 SEMICOLON {: RESULT=new ConstantDeclaration(T1, C2); RESULT.setLine(T1left); :}
    | (ErrorConstDeclSemi) CONST error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne konstante na liniji " + errleft); :} {: RESULT=new ErrorConstDeclSemi(); :}
;

ConstList ::=
    (SingleConstantDecl) Const:C1 {: RESULT=new SingleConstantDecl(C1); RESULT.setLine(C1left); :}
    | (ConsantListDecl) ConstList:C1 COMMA Const:C2 {: RESULT=new ConsantListDecl(C1, C2); RESULT.setLine(C1left); :}
    | (ErrorConstDeclComma) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne konstante na liniji " + errleft); :} {: RESULT=new ErrorConstDeclComma(); :}
;

Const ::=
    (ConstNumber) IDENT:constName ASSIGN NUMBER:N1 {: RESULT=new ConstNumber(constName, N1); RESULT.setLine(constNameleft); :}
    | (ConstChar) IDENT:constName ASSIGN CHAR:C1 {: RESULT=new ConstChar(constName, C1); RESULT.setLine(constNameleft); :}
    | (ConstBool) IDENT:constName ASSIGN BOOL:B1 {: RESULT=new ConstBool(constName, B1); RESULT.setLine(constNameleft); :}
;

VarDecl ::=
    (VariableDeclaration) Type:T1 VarList:V2 SEMICOLON {: RESULT=new VariableDeclaration(T1, V2); RESULT.setLine(T1left); :}
    | (ErrorVarDeclSemi) error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive na liniji " + errleft); :} {: RESULT=new ErrorVarDeclSemi(); :}
;

VarList ::=
    (SingleVarDecl) Var:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
    | (VarListDecl) VarList:V1 COMMA Var:V2 {: RESULT=new VarListDecl(V1, V2); RESULT.setLine(V1left); :}
    | (ErrorVarDeclComma) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji globalne promenljive na liniji " + errleft); :} {: RESULT=new ErrorVarDeclComma(); :}
;

Var ::=
    (VarElement) IDENT:varName {: RESULT=new VarElement(varName); RESULT.setLine(varNameleft); :} 
    | (VarArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarArray(varName); RESULT.setLine(varNameleft); :}
    | (VarMatrix) IDENT:varName  LBRACKET RBRACKET LBRACKET RBRACKET {: RESULT=new VarMatrix(varName); RESULT.setLine(varNameleft); :}
;

MethodDeclList ::=
    (MethodDeclarationList) MethodDeclList:M1 Method:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
    | (NoMethodDeclarationList) {: RESULT=new NoMethodDeclarationList(); :} /* epsilon */
;

Method ::=
    (Method) MethodName:mName LPARENT MethodPars:M1 RPARENT LocalVarDeclList:L2 LBRACE StatementList:S3 RBRACE {: RESULT=new Method(mName, M1, L2, S3); RESULT.setLine(mNameleft); :}
;

MethodName ::=
    (MethodTypeName) Type:returnType IDENT:methodName {: RESULT=new MethodTypeName(returnType, methodName); RESULT.setLine(returnTypeleft); :}
    | (MethodVoidName) VOID IDENT:methodName {: RESULT=new MethodVoidName(methodName); RESULT.setLine(methodNameleft); :}
;

MethodPars ::=
    (MethodParameters) FormPars:F1 {: RESULT=new MethodParameters(F1); RESULT.setLine(F1left); :}
    | (ErrorMethodParameters) error:err
        {: parser.log.debug("Uspesan oporavak od greske pri definiciji parametara metode na liniji " + errleft); :} {: RESULT=new ErrorMethodParameters(); :}
    | (NoMethodParameters) {: RESULT=new NoMethodParameters(); :} /* epsilon */
;

FormPars ::=
    (FormParamList) FormPars:F1 COMMA FormParam:F2 {: RESULT=new FormParamList(F1, F2); RESULT.setLine(F1left); :}
    | (SingleFormParam) FormParam:F1 {: RESULT=new SingleFormParam(F1); RESULT.setLine(F1left); :}
;
    
FormParam ::=
    (FormParamElement) Type:paramType IDENT:paramName {: RESULT=new FormParamElement(paramType, paramName); RESULT.setLine(paramTypeleft); :}
    | (FormParamArray) Type:paramType IDENT:paramName LBRACKET RBRACKET {: RESULT=new FormParamArray(paramType, paramName); RESULT.setLine(paramTypeleft); :}
;

Type ::= (Type)
    IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
;

LocalVarDeclList ::=
    (LocalVarDeclarations) LocalVarDeclList:L1 VarDecl:V2 {: RESULT=new LocalVarDeclarations(L1, V2); RESULT.setLine(L1left); :}
    | (NoLocalVarDeclarations) {: RESULT=new NoLocalVarDeclarations(); :} /* epsilon */
;
    
StatementList ::=
    (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
    | (NoStatements) {: RESULT=new NoStatements(); :} /* epsilon */
;

Statement ::=
    (MatchedStmt) MatchedStatement:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
    | (UnmatchedStmt) UnmatchedStatement:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
;

UnmatchedStatement ::=
    (UnmatchedIf) IF LPARENT Condition:C1 RPARENT Statement:S2 {: RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); :}
    | (UnmatchedIfElse) IF LPARENT Condition:C1 RPARENT MatchedStatement:M2 ELSE UnmatchedStatement:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :}
;

MatchedStatement ::=
    (MatchedIf) IF LPARENT Condition:C1 RPARENT MatchedStatement:M2 ELSE MatchedStatement:M3 {: RESULT=new MatchedIf(C1, M2, M3); RESULT.setLine(C1left); :}
    | (DesignStmt) DesignatorStatement:D1 SEMICOLON {: RESULT=new DesignStmt(D1); RESULT.setLine(D1left); :}
    | (BreakStmt) BREAK SEMICOLON {: RESULT=new BreakStmt(); :}
    | (ContinueStmt) CONTINUE SEMICOLON {: RESULT=new ContinueStmt(); :}
    | (ReturnNoExpr) RETURN SEMICOLON {: RESULT=new ReturnNoExpr(); :}
    | (ReturnExpr) RETURN Expr:E1 SEMICOLON {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
    | (ReadStmt) READ LPARENT Designator:D1 RPARENT SEMICOLON {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
    | (PrintExpr) PRINT LPARENT Expr:E1 RPARENT SEMICOLON {: RESULT=new PrintExpr(E1); RESULT.setLine(E1left); :}
    | (PrintExprNumber) PRINT LPARENT Expr:E1 COMMA NUMBER:N2 RPARENT SEMICOLON {: RESULT=new PrintExprNumber(E1, N2); RESULT.setLine(E1left); :}
    | (ForStmt) FOR LPARENT DesignatorStmtList:D1 SEMICOLON OptCondFact:O2 SEMICOLON DesignatorStmtList:D3 RPARENT MatchedStatement:M4 {: RESULT=new ForStmt(D1, O2, D3, M4); RESULT.setLine(D1left); :}
    | (StmtList) LBRACE StatementList:S1 RBRACE {: RESULT=new StmtList(S1); RESULT.setLine(S1left); :}
    | (ErrorAssign) error:err SEMICOLON
        {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :} {: RESULT=new ErrorAssign(); :}
;

DesignatorStmtList ::=
    (DesignatorStatements) DesignatorStmtList:D1 DesignatorStatementElem:D2 {: RESULT=new DesignatorStatements(D1, D2); RESULT.setLine(D1left); :}
    | (NoDesignatorStatements) {: RESULT=new NoDesignatorStatements(); :} /* epsilon */
;

DesignatorStatementElem ::=
    (SingleDesignatorStmt) DesignatorStatement:D1 {: RESULT=new SingleDesignatorStmt(D1); RESULT.setLine(D1left); :}
    | (MultipleDesignatorStmt) DesignatorStatementElem:D1 COMMA DesignatorStatement:D2 {: RESULT=new MultipleDesignatorStmt(D1, D2); RESULT.setLine(D1left); :}
    ;

DesignatorStatement ::=
    (DesignAssign) Designator:design Assignop:A1 Expr:E2 {: RESULT=new DesignAssign(design, A1, E2); RESULT.setLine(designleft); :}
    | (DesingFunc) Designator:func LPARENT OptActPars:O1 RPARENT {: RESULT=new DesingFunc(func, O1); RESULT.setLine(funcleft); :}
    | (DesignInc) Designator:design INC {: RESULT=new DesignInc(design); RESULT.setLine(designleft); :}
    | (DesignDec) Designator:design DEC {: RESULT=new DesignDec(design); RESULT.setLine(designleft); :}
;

OptCondFact ::= 
    (ConditionFactor) CondFact:C1 {: RESULT=new ConditionFactor(C1); RESULT.setLine(C1left); :}
    | (NoConditionFactor) {: RESULT=new NoConditionFactor(); :} /* epsilon */
;

OptActPars ::=
    (ActParameters) ActPars:A1 {: RESULT=new ActParameters(A1); RESULT.setLine(A1left); :}
    | (NoActParameters) {: RESULT=new NoActParameters(); :} /* epsilon */
;

ActPars ::=
    (SingleActParam) Expr:e {: RESULT=new SingleActParam(e); RESULT.setLine(eleft); :}
    | (ActParamList) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParamList(A1, E2); RESULT.setLine(A1left); :}
;

Condition ::=
    (SingleConditionTerm) CondTerm:C1 {: RESULT=new SingleConditionTerm(C1); RESULT.setLine(C1left); :}
    | (ConditionTermList) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionTermList(C1, C2); RESULT.setLine(C1left); :}
;

CondTerm ::=
    (SingleConditionFact) CondFact:C1 {: RESULT=new SingleConditionFact(C1); RESULT.setLine(C1left); :}
    | (ConditionFactList) CondTerm:C1 AND CondFact:C2 {: RESULT=new ConditionFactList(C1, C2); RESULT.setLine(C1left); :}
;

CondFact ::=
    (SingleCondition) Expr:E1 {: RESULT=new SingleCondition(E1); RESULT.setLine(E1left); :}
    | (ConditionList) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ConditionList(E1, R2, E3); RESULT.setLine(E1left); :}
;

Expr ::=
    (PositiveTermList) TermList:T1 {: RESULT=new PositiveTermList(T1); RESULT.setLine(T1left); :}
    | (NegativeTermList) MINUS TermList:T1 {: RESULT=new NegativeTermList(T1); RESULT.setLine(T1left); :}
;

TermList ::=
    (SingleTerm) Term:T1 {: RESULT=new SingleTerm(T1); RESULT.setLine(T1left); :}
    | (TerminalList) TermList:T1 Addop:A2 Term:T3 {: RESULT=new TerminalList(T1, A2, T3); RESULT.setLine(T1left); :}
;

Term ::= (Term)
    FactorList:F1 {: RESULT=new Term(F1); RESULT.setLine(F1left); :}
;

FactorList ::=
    (SingleFactor) Factor:F1 {: RESULT=new SingleFactor(F1); RESULT.setLine(F1left); :}
    | (Factors) FactorList:F1 Mulop:M2 Factor:F3 {: RESULT=new Factors(F1, M2, F3); RESULT.setLine(F1left); :}
;

Factor ::=
    (DesignFactor) Designator:design {: RESULT=new DesignFactor(design); RESULT.setLine(designleft); :}
    | (DesingFuncFactor) Designator:func LPARENT OptActPars:O1 RPARENT {: RESULT=new DesingFuncFactor(func, O1); RESULT.setLine(funcleft); :}
    | (FactorNumber) NUMBER:N1 {: RESULT=new FactorNumber(N1); RESULT.setLine(N1left); :}
    | (FactorChar) CHAR:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
    | (FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
    | (NewArrayFactor) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewArrayFactor(T1, E2); RESULT.setLine(T1left); :}
    | (NewMatrixFactor) NEW Type:T1 LBRACKET Expr:E2 RBRACKET LBRACKET Expr:E3 RBRACKET {: RESULT=new NewMatrixFactor(T1, E2, E3); RESULT.setLine(T1left); :}
    | (NewClassFactor) NEW Type:T1 LPARENT OptActPars:O2 RPARENT {: RESULT=new NewClassFactor(T1, O2); RESULT.setLine(T1left); :}
    | (FactorExpr) LPARENT Expr:E1 RPARENT {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
;

Designator ::=
    (DesignatorElement) IDENT:designName {: RESULT=new DesignatorElement(designName); RESULT.setLine(designNameleft); :}
    | (DesignatorArray) IDENT:designName LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorArray(designName, E1); RESULT.setLine(designNameleft); :}
    | (DesignatorMatrix) IDENT:designName LBRACKET Expr:E1 RBRACKET LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorMatrix(designName, E1, E2); RESULT.setLine(designNameleft); :}
;

Label ::= (Label)
    IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :}
;

Assignop ::= (Assignop)
    ASSIGN {: RESULT=new Assignop(); :}
;

Relop ::=
    (RelopEquals) EQUALS {: RESULT=new RelopEquals(); :}
    | (RelopNotEquals) NOT_EQUALS {: RESULT=new RelopNotEquals(); :}
    | (RelopGreater) GREATER {: RESULT=new RelopGreater(); :}
    | (RelopGreaterEqual) GREATER_EQUAL {: RESULT=new RelopGreaterEqual(); :}
    | (RelopLess) LESS {: RESULT=new RelopLess(); :}
    | (RelopLessEqual) LESS_EQUAL {: RESULT=new RelopLessEqual(); :}
;

Addop ::=
    (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
    | (AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
;

Mulop ::=
    (MulopMul) MUL {: RESULT=new MulopMul(); :}
    | (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
    | (MulopMod) MOD {: RESULT=new MulopMod(); :}
;